theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1), label = 'Quantidade', col = 'orange') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201405', y=1.2), label = 'Quantidade', col = 'orange') +
geom_label(aes(x='201405', y=1.4), label = 'Valor', col = 'blue') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201405', y=1.2), label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_label(aes(x='201405', y=1.3), label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.25), label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_label(aes(x='201402', y=1.3), label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.23), label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_label(aes(x='201402', y=1.3), label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.13), label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_label(aes(x='201402', y=1.2), label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.13),
label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.2),
label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
## Opções iniciais de configuração do ambiente
# ------------------------------------------------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
# ------------------------------------------------------------------------------------------
library("stringr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("readr", lib.loc="~/R/win-library/3.4")
library("tibble", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("purrr", lib.loc="~/R/win-library/3.4")
# ------------------------------------------------------------------------------------------
## Importação
# ------------------------------------------------------------------------------------------
x_vv_main <- read_excel('VV_extract_sqlbi.xls') %>%
mutate(ANOMES = factor(.$ANOMES), ANO = factor(.$ANO)) %>%
as.tibble()
## Quebra em blocos por ano, calcula a média de cada variável, armazena em lista de planilhas
# ------------------------------------------------------------------------------------------
mn.ano <- x_vv_main %>%
split(.$ANO) %>%
map(map_dbl, mean)
## Cria planilha vazia com nomes de colunas a partir de um bloco da lista acima
# ------------------------------------------------------------------------------------------
vv_ano <- setNames(data.frame(matrix(ncol = 17, nrow = 0)),
names(mn.ano[[1]])[-2]) %>%
as.tibble()
## Extrai variáveis dos blocos na lista para a planilha vazia
# ------------------------------------------------------------------------------------------
for (i in seq_along(mn.ano)) vv_ano[i, 1:17] <- c(ANO = names(mn.ano[i]),mn.ano[[i]][3:18])
## Converte variáveis para número de dupla precisão e ano para fator
# ------------------------------------------------------------------------------------------
vv_ano[,2:17] %<>% map_df(as.double)
vv_ano$ANO %<>% factor(.)
## Função para calculo de variação percentual em relação ao ano anterior
# ----------------------------------------------------------------------
## f.lag_perc <- function(col) (col-lag(col))/lag(col)
## Calcula a variação percentual ano a ano de cada variável
# ------------------------------------------------------------------------------------------
vv_var_perc_ano <- vv_ano[,2:17] %>%
map_df(function(.) (.-lag(.))/lag(.)) %>%
cbind(vv_ano[,1],.)
## Para retirada do ano sem valores prévios no resultado acima
# ------------------------------------------------------------------------------------------
## @2 #'['(2:dim(vv_ano)[1],) %>%
## @3 #2:dim(vv_ano)[1]
## Renomeia colunas, para junção de planilhas
# ------------------------------------------------------------------------------------------
colnames(vv_var_perc_ano) <- paste0(colnames(vv_var_perc_ano),'.vp')
names(vv_var_perc_ano)[1] <- 'ANO'
## Junção de planilhas
# ------------------------------------------------------------------------------------------
vv_ano_n <- merge(vv_ano, vv_var_perc_ano, by = 'ANO')
## Reordenação de campos
# ------------------------------------------------------------------------------------------
names.v <- names(vv_ano)[1]
for (i in seq_along(names(vv_ano))) {
if (i > 1) {
names.v[length(names.v)+1] <- c(names(vv_ano)[i])
names.v[length(names.v)+1] <- paste0(names(vv_ano)[i], '.vp')
}
}
vv_ano_n <- select(vv_ano_n, names.v)
## Alternativa para reordenação
# ------------------------------------------------------------------------------------------
## vv_ano_n <- vv_ano_n[,c(1,2,18,3,19,4,20,5,21,6,22,7,23,8,24,9,25,
##                        10,26,11,27,12,28,13,29,14,30,15,31,16,32,17,33)]
## Exportação de planilha
# ------------------------------------------------------------------------------------------
write.csv2(vv_ano_n, 'resumo_ano.csv')
print(as.tibble(vv_ano_n))
## Geração de planilha com valores convertidos em escala de desvío padrão
# ------------------------------------------------------------------------------------------
vv_am_scale <- x_vv_main[3:18] %>%
map_df(scale, F, T)
## Renomeia colunas e união de planilhas
# ------------------------------------------------------------------------------------------
colnames(vv_am_scale) <- paste0(colnames(vv_am_scale),'.sd')
vv_am_scale <- cbind(x_vv_main[1:2], vv_am_scale)
vv_am_scale_n <- merge(x_vv_main, vv_am_scale, by = 'ANOMES')
colnames(vv_am_scale_n)[2] <- 'ANO'
## Reordenação de campos
# ------------------------------------------------------------------------------------------
names.v <- names(x_vv_main)[1]
names.v[2] <- names(x_vv_main)[2]
for (i in seq_along(names(x_vv_main))) {
if (i > 2) {
names.v[length(names.v)+1] <- c(names(x_vv_main)[i])
names.v[length(names.v)+1] <- paste0(names(x_vv_main)[i], '.sd')
}
}
vv_am_scale_n <- select(vv_am_scale_n, names.v)
## Exportação de planilha
# ------------------------------------------------------------------------------------------
write.csv2(vv_am_scale_n, 'resumo_anomes.csv')
print(as.tibble(vv_am_scale_n))
#names(vv_am_scale_n)
## Formatação da planilha para plotagem gráfica
# ------------------------------------------------------------------------------------------
vv_plot <- vv_am_scale_n %>%
select(ANO, ANOMES,
'Quantidade Aprovada' = QP.sd,
'Valor Total' = VT.sd,
#'Quantidade Média' = QM.sd,
#'Ticket Médio' = VM.sd,
#'Quantidade por Atendido' = QA.sd,
#'Valor por Atendido' = VA.sd,
#'Quantidade por Conta' = QC.sd,
#'Valor por Conta' = VC.sd,
#'Quantidade por Item' = QI.sd,
#'Valor por Item' = VI.sd,
'Valor por Quantidade' = VQ.sd#,
#'Beneficiários Totais' = BT.sd,
#'Beneficiários Atendidos' = BA.sd,
#'Quantidade de Contas' = CT.sd,
#'Quantidade de Itens' = IT.sd,
#'Percentual de Atendidos' = PA.sd
) %>%
gather(-ANO,
-ANOMES,
key = 'Indicador', value = 'Valor')
## Gráfico de dados padronizados
# ------------------------------------------------------------------------------------------
ggplot(data = vv_plot, aes(x = ANOMES)) +
geom_line(aes(y = Valor,
group = Indicador,
col = Indicador),
size = 1.1) +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_dark() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
## Gráfico a partir de planilha original
# ------------------------------------------------------------------------------------------
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_bar(aes(y = QP.sd),
fill = 'orange',
width = 0.9,
alpha = 0.6,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.13),
label = 'Quantidade', col = 'orange', hjust = 'left') +
geom_bar(aes(y = VT.sd),
fill = 'blue',
width = 0.6,
alpha = 0.3,
stat = 'sum',
show.legend = F) +
geom_label(aes(x='201402', y=1.2),
label = 'Valor', col = 'blue', hjust = 'left') +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
## Gráfico da diferença entre variação padronizada entre Valor e Quantidade, por ano
# ------------------------------------------------------------------------------------------
ggplot(data = vv_am_scale_n, aes(x = ANOMES)) +
geom_line(aes(y = VT.sd-QP.sd), col = 'light blue', size = 1.1, group = 1) + #, col = ANO
geom_line(aes(y = mean(VT.sd-QP.sd)), col = 'orange', size = 1.1, group = 1) +
facet_wrap(~ANO, ncol = 2, scales = "free") +
labs(title = 'Comparação de Indicadores por dados padronizados',
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx')
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx')
View(x_vv_faixa)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4))) %>%
select(ANO, ANOMES = factor(ANOMES), FAIXA, BENEFICIARIOS = BT)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4))) %>%
select(ANO, ANOMES = factor(.$ANOMES), FAIXA, BENEFICIARIOS = BT)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4))) %>%
select(ANO, ANOMES = factor(.$ANOMES), FAIXA, BENEFICIARIOS = BT)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4))) %>%
select(ANO, ANOMES = factor(ANOMES), FAIXA, BENEFICIARIOS = BT)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)))# %>%
str(x_vv_faixa)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)), ANOMES = factor(ANOMES)) %>%
select(ANO, ANOMES, FAIXA, BENEFICIARIOS = BT)
str(x_vv_faixa)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)), ANOMES = factor(ANOMES), FAIXA = factor(FAIXA)) %>%
select(ANO, ANOMES, FAIXA, BENEFICIARIOS = BT)
str(x_vv_faixa)
x_vv_faixa %>%
filter(ANOMES == '201701')
sum(x_vv_faixa %>%
filter(ANOMES == '201701'))
sum(filter(x_vv_faixa, ANOMES == '201701'))
sum(filter(x_vv_faixa, ANOMES == '201701')[,4])
sum(filter(x_vv_faixa, ANOMES == '201707')[,4])
x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS))
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS))
View(vv_faixa_ano)
x_vv_faixa$FAIXA
str(x_vv_faixa$FAIXA)
levels(x_vv_faixa$FAIXA)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)),
ANOMES = factor(ANOMES),
FAIXA = factor(FAIXA, levels("até 18 anos", "19 a 23 anos",
"24 a 28 anos", "29 a 33 anos",
"34 a 38 anos", "39 a 43 anos",
"44 a 48 anos", "49 a 53 anos",
"54 a 58 anos", "59 anos ou mais"))) %>%
select(ANO, ANOMES, FAIXA, BENEFICIARIOS = BT)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS))
levels(x_vv_faixa$FAIXA)
str(x_vv_faixa$FAIXA)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)),
ANOMES = factor(ANOMES),
FAIXA = factor(FAIXA, levels= c("até 18 anos", "19 a 23 anos",
"24 a 28 anos", "29 a 33 anos",
"34 a 38 anos", "39 a 43 anos",
"44 a 48 anos", "49 a 53 anos",
"54 a 58 anos", "59 anos ou mais"))) %>%
select(ANO, ANOMES, FAIXA, BENEFICIARIOS = BT)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS))
str(x_vv_faixa$FAIXA)
x_vv_faixa <- read_excel('beneficiarios_faixa.xlsx') %>%
mutate(ANO = factor(str_sub(ANOMES, 1, 4)),
ANOMES = factor(ANOMES),
FAIXA = factor(FAIXA, levels = c("até 18 anos", "19 a 23 anos",
"24 a 28 anos", "29 a 33 anos",
"34 a 38 anos", "39 a 43 anos",
"44 a 48 anos", "49 a 53 anos",
"54 a 58 anos", "59 anos ou mais"))) %>%
select(ANO, ANOMES, FAIXA, BENEFICIARIOS = BT)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS))
View(vv_ano)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
mutate(TOTAL_B = vv_ano[ANO == .$ANO, 'BT'])
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[ANO == .$ANO, 'BT'])
View(vv_faixa_ano)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[ANO == .$ANO, 'BT'][[1]])
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = merge(., vv_ano[,c(1,13)], by = 'ANO'))
vv_ano[,c(1,13)]
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(ANO, .$ANO), 13])
vv_ano[match(ANO, x_vv_faixa$ANO), 13]
View(x_vv_faixa)
View(vv_faixa_ano)
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO), 13]
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO), 13][[1]]
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO), 13][1]
vv_ano[ANO == match(vv_ano$ANO, x_vv_faixa$ANO), 13][1]
vv_ano[vv_ano$ANO == match(vv_ano$ANO, x_vv_faixa$ANO), 13][1]
vv_ano[vv_ano$ANO == match(vv_ano$ANO, x_vv_faixa$ANO), 13]
vv_ano['ANO' == match(vv_ano$ANO, x_vv_faixa$ANO), 13]
match(vv_ano$ANO, x_vv_faixa$ANO)
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO)[1], 13]
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO)[1], 13][[1]]
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(vv_ano$ANO, .$ANO)[1], 13][[1]])
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(vv_ano$ANO, .$ANO)[1], 13][[1]])
View(vv_ano)
View(vv_faixa_ano)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(vv_ano$ANO, .$ANO)[1], 13])
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(vv_ano$ANO, .$ANO)[1], 13])
View(vv_faixa_ano)
vv_ano[match(vv_ano$ANO, .$ANO)[1], 13]
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO)[1], 13]
vv_ano[match(vv_ano$ANO, x_vv_faixa$ANO)[1], 13][1]
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(.$ANO, vv_ano$ANO), 13])
View(vv_faixa_ano)
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(.$ANO, vv_ano$ANO), 13][[1]])
vv_faixa_ano <- x_vv_faixa %>%
group_by(ANO, FAIXA) %>%
summarise(BENEFICIARIOS.md = mean(BENEFICIARIOS)) %>%
as.data.frame() %>%
mutate(TOTAL_B = vv_ano[match(.$ANO, vv_ano$ANO), 13][[1]])
View(vv_faixa_ano)
