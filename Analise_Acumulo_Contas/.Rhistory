dplyr::summarise(sum(QP, na.rm = T),
sum(VA, na.rm = T),
sum(VR, na.rm = T),
sum(CT, na.rm = T))
if (mrge == 'A') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all = T)
} else if (mrge == 'X') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all.x = T)
}
return(df)
}
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(., .$ANOMES_FT) %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle_p(., .$ANOMES_FT, 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle_p(., .$ANOMES_FT, 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle_p(., .$ANOMES_FT, 'A')
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(., .$ANOMES_AT, 'X')
FA.df_base[is.na(FA.df_base)] <- 0
names(FA.df_base) <- c('CODIGO', 'PRESTADOR', 'ANOMES',
'QTA_FTT', 'VA_FTT', 'VR_FTT', 'C_FTT',
'QTA_FCR', 'VA_FCR', 'VR_FCR', 'C_FCR',
'QTA_FAC', 'VA_FAC', 'VR_FAC', 'C_FAC',
'QTA_FMA', 'VA_FMA', 'VR_FMA', 'C_FMA',
'QTA_ATE', 'VA_ATE', 'VR_ATE', 'C_ATE')
View(FA.df_base)
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(., .$ANOMES_FT) %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p() %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle_p(.,  mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle_p(., mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle_p(., mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(., .$ANOMES_AT, mrge = 'X')
FA.df_base[is.na(FA.df_base)] <- 0
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p() %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p() %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(.$ANOMES_AT, mrge = 'X')
View(FA.df_base)
## Opções iniciais de configuração do ambiente --------------
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
#### --------------------------------------------------------
library("stringr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("readr", lib.loc="~/R/win-library/3.4")
library("tibble", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("purrr", lib.loc="~/R/win-library/3.4")
#### --------------------------------------------------------
##----------------------------------------------------------------------------
v.top <- 5
v.limite_min <- 35*1000*1000
# v.rank:
#   faturado.r
#   dma.r
#   dma.c.r
##----------------------------------------------------------------------------
x_anomes_id <- read_excel('anomes_id.xlsx') %>% mutate(anomes = factor(anomes))
x_fat_ate_d <- read_excel('Geral2014_17_prestadores_d.xlsx')
x_geral_d <- read_excel('Geral2014_17_d.xlsx')
print(paste0('Representatividade dos 200 maiores prestadores no faturamento total (2014-2017/07): ', round((((sum(x_fat_ate_d$VA)+sum(x_fat_ate_d$VR))/(sum(x_geral_d$VA)+sum(x_geral_d$VR)))*100)), '%   '))
print(paste0('Parâmetro de seleção de prestadores (top N): ', v.top, '    '))
print(paste0('Parâmetro de Valor mínimo de faturamento acumulado total: ', v.limite_min, '    '))
##----------------------------------------------------------------------------
## Por prestador
##----------------------------------------------------------------------------
x_fat_ate_d %<>%
merge(.,x_anomes_id, by.x = 'ANOMES_FT', by.y = 'anomes') %>%
merge(.,x_anomes_id, by.x = 'ANOMES_AT', by.y = 'anomes') %>%
arrange(CODIGO, id.x, id.y) %>%
mutate(DELTA_ANM = id.x-id.y, CT = 1) %>%
select(CODIGO, PRESTADOR,
ANOMES_FT,
DELTA_ANM,
ID_FT = id.x,
ANOMES_AT,
ID_AT = id.y,
QP, VA, VR, CT)
f.shuffle_p <- function(df, FT_AT = df$ANOMES_FT, mrge = 'N') {
df %<>% group_by(CODIGO, PRESTADOR, ANOMES = FT_AT) %>%
dplyr::summarise(sum(QP, na.rm = T),
sum(VA, na.rm = T),
sum(VR, na.rm = T),
sum(CT, na.rm = T))
if (mrge == 'A') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all = T)
} else if (mrge == 'X') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all.x = T)
}
return(df)
}
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p() %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(FT_AT = .$ANOMES_AT, mrge = 'X')
FA.df_base[is.na(FA.df_base)] <- 0
names(FA.df_base) <- c('CODIGO', 'PRESTADOR', 'ANOMES',
'QTA_FTT', 'VA_FTT', 'VR_FTT', 'C_FTT',
'QTA_FCR', 'VA_FCR', 'VR_FCR', 'C_FCR',
'QTA_FAC', 'VA_FAC', 'VR_FAC', 'C_FAC',
'QTA_FMA', 'VA_FMA', 'VR_FMA', 'C_FMA',
'QTA_ATE', 'VA_ATE', 'VR_ATE', 'C_ATE')
FA.df_base %<>% select(CODIGO, PRESTADOR, ANOMES,
VA_FTT, VA_ATE, VA_FCR, VA_FAC, VA_FMA,
# QTA_FTT, QTA_ATE, QTA_FCR, QTA_FAC, QTA_FMA,
VR_FTT, VR_ATE, VR_FCR, VR_FAC, VR_FMA,
C_FTT, C_ATE #, C_FCR, C_FAC, C_FMA
) %>%
mutate(P_FCR = VA_FCR/VA_FTT,
P_FMA = VA_FMA/VA_FTT,
DIF = VA_FTT-VA_ATE,
ANOMES = factor(ANOMES))
##----------------------------------------------------------------------------
## Geral
##----------------------------------------------------------------------------
x_geral_d %<>%
merge(.,x_anomes_id, by.x = 'ANOMES_FT', by.y = 'anomes') %>%
merge(.,x_anomes_id, by.x = 'ANOMES_AT', by.y = 'anomes') %>%
arrange(id.x, id.y) %>%
mutate(DELTA_ANM = id.x-id.y, CT = 1) %>%
select(ANOMES_FT,
DELTA_ANM,
ID_FT = id.x,
ANOMES_AT,
ID_AT = id.y,
QP, VA, VR, CT)
f.shuffle <- function(df, FT_AT = df$ANOMES_FT, mrge = 'N')  {
df %<>% group_by(ANOMES = FT_AT) %>%
dplyr::summarise(sum(QP, na.rm = T),
sum(VA, na.rm = T),
sum(VR, na.rm = T),
sum(CT, na.rm = T))
if (mrge == 'A') {
df %<>% merge(FA.df_base, ., by = 'ANOMES', all = T)
} else if (mrge == 'X') {
df %<>% merge(FA.df_base, ., by = 'ANOMES', all.x = T)
}
return(df)
}
FA.df_base_geral <- x_geral_d %>%
f.shuffle() %>%
as.data.frame()
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
f.shuffle(FT_AT = .$ANOMES_AT, mrge = 'X')
FA.df_base_geral[is.na(FA.df_base_geral)] <- 0
names(FA.df_base_geral) <- c('ANOMES',
'QTA_FTT', 'VA_FTT', 'VR_FTT', 'C_FTT',
'QTA_FCR', 'VA_FCR', 'VR_FCR', 'C_FCR',
'QTA_FAC', 'VA_FAC', 'VR_FAC', 'C_FAC',
'QTA_FMA', 'VA_FMA', 'VR_FMA', 'C_FMA',
'QTA_ATE', 'VA_ATE', 'VR_ATE', 'C_ATE')
FA.df_base_geral %<>% select(ANOMES,
VA_FTT, VA_ATE, VA_FCR, VA_FAC, VA_FMA,
# QTA_FTT, QTA_ATE, QTA_FCR, QTA_FAC, QTA_FMA,
VR_FTT, VR_ATE, VR_FCR, VR_FAC, VR_FMA,
C_FTT, C_ATE #, C_FCR, C_FAC, C_FMA
) %>%
mutate(P_FCR = VA_FCR/VA_FTT,
P_FMA = VA_FMA/VA_FTT,
DIF = VA_FTT-VA_ATE,
ANOMES = factor(ANOMES))
## Opções iniciais de configuração do ambiente --------------
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
#### --------------------------------------------------------
library("stringr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("readr", lib.loc="~/R/win-library/3.4")
library("tibble", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("purrr", lib.loc="~/R/win-library/3.4")
#### --------------------------------------------------------
##----------------------------------------------------------------------------
v.top <- 5
v.limite_min <- 35*1000*1000
# v.rank:
#   faturado.r
#   dma.r
#   dma.c.r
##----------------------------------------------------------------------------
x_anomes_id <- read_excel('anomes_id.xlsx') %>% mutate(anomes = factor(anomes))
x_fat_ate_d <- read_excel('Geral2014_17_prestadores_d.xlsx')
x_geral_d <- read_excel('Geral2014_17_d.xlsx')
print(paste0('Representatividade dos 200 maiores prestadores no faturamento total (2014-2017/07): ', round((((sum(x_fat_ate_d$VA)+sum(x_fat_ate_d$VR))/(sum(x_geral_d$VA)+sum(x_geral_d$VR)))*100)), '%   '))
print(paste0('Parâmetro de seleção de prestadores (top N): ', v.top, '    '))
print(paste0('Parâmetro de Valor mínimo de faturamento acumulado total: ', v.limite_min, '    '))
##----------------------------------------------------------------------------
## Por prestador
##----------------------------------------------------------------------------
x_fat_ate_d %<>%
merge(.,x_anomes_id, by.x = 'ANOMES_FT', by.y = 'anomes') %>%
merge(.,x_anomes_id, by.x = 'ANOMES_AT', by.y = 'anomes') %>%
arrange(CODIGO, id.x, id.y) %>%
mutate(DELTA_ANM = id.x-id.y, CT = 1) %>%
select(CODIGO, PRESTADOR,
ANOMES_FT,
DELTA_ANM,
ID_FT = id.x,
ANOMES_AT,
ID_AT = id.y,
QP, VA, VR, CT)
f.shuffle_p <- function(df, FT_AT = df$ANOMES_FT, mrge = 'N') {
df %<>% group_by(CODIGO, PRESTADOR, ANOMES = FT_AT) %>%
dplyr::summarise(sum(QP, na.rm = T),
sum(VA, na.rm = T),
sum(VR, na.rm = T),
sum(CT, na.rm = T))
if (mrge == 'A') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all = T)
} else if (mrge == 'X') {
df %<>% merge(FA.df_base, ., by = c('CODIGO', 'PRESTADOR', 'ANOMES'), all.x = T)
}
return(df)
}
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p() %>%
as.data.frame()
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle_p(mrge = 'A')
FA.df_base <- x_fat_ate_d %>%
f.shuffle_p(FT_AT = .$ANOMES_AT, mrge = 'X')
FA.df_base[is.na(FA.df_base)] <- 0
names(FA.df_base) <- c('CODIGO', 'PRESTADOR', 'ANOMES',
'QTA_FTT', 'VA_FTT', 'VR_FTT', 'C_FTT',
'QTA_FCR', 'VA_FCR', 'VR_FCR', 'C_FCR',
'QTA_FAC', 'VA_FAC', 'VR_FAC', 'C_FAC',
'QTA_FMA', 'VA_FMA', 'VR_FMA', 'C_FMA',
'QTA_ATE', 'VA_ATE', 'VR_ATE', 'C_ATE')
FA.df_base %<>% select(CODIGO, PRESTADOR, ANOMES,
VA_FTT, VA_ATE, VA_FCR, VA_FAC, VA_FMA,
# QTA_FTT, QTA_ATE, QTA_FCR, QTA_FAC, QTA_FMA,
VR_FTT, VR_ATE, VR_FCR, VR_FAC, VR_FMA,
C_FTT, C_ATE #, C_FCR, C_FAC, C_FMA
) %>%
mutate(P_FCR = VA_FCR/VA_FTT,
P_FMA = VA_FMA/VA_FTT,
DIF = VA_FTT-VA_ATE,
ANOMES = factor(ANOMES))
##----------------------------------------------------------------------------
## Geral
##----------------------------------------------------------------------------
x_geral_d %<>%
merge(.,x_anomes_id, by.x = 'ANOMES_FT', by.y = 'anomes') %>%
merge(.,x_anomes_id, by.x = 'ANOMES_AT', by.y = 'anomes') %>%
arrange(id.x, id.y) %>%
mutate(DELTA_ANM = id.x-id.y, CT = 1) %>%
select(ANOMES_FT,
DELTA_ANM,
ID_FT = id.x,
ANOMES_AT,
ID_AT = id.y,
QP, VA, VR, CT)
f.shuffle <- function(df, FT_AT = df$ANOMES_FT, mrge = 'N')  {
df %<>% group_by(ANOMES = FT_AT) %>%
dplyr::summarise(sum(QP, na.rm = T),
sum(VA, na.rm = T),
sum(VR, na.rm = T),
sum(CT, na.rm = T))
if (mrge == 'A') {
df %<>% merge(FA.df_base_geral, ., by = 'ANOMES', all = T)
} else if (mrge == 'X') {
df %<>% merge(FA.df_base_geral, ., by = 'ANOMES', all.x = T)
}
return(df)
}
FA.df_base_geral <- x_geral_d %>%
f.shuffle() %>%
as.data.frame()
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM == 0) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM != 0) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
filter(DELTA_ANM == 1) %>%
f.shuffle(mrge = 'A')
FA.df_base_geral <- x_geral_d %>%
f.shuffle(FT_AT = .$ANOMES_AT, mrge = 'X')
FA.df_base_geral[is.na(FA.df_base_geral)] <- 0
names(FA.df_base_geral) <- c('ANOMES',
'QTA_FTT', 'VA_FTT', 'VR_FTT', 'C_FTT',
'QTA_FCR', 'VA_FCR', 'VR_FCR', 'C_FCR',
'QTA_FAC', 'VA_FAC', 'VR_FAC', 'C_FAC',
'QTA_FMA', 'VA_FMA', 'VR_FMA', 'C_FMA',
'QTA_ATE', 'VA_ATE', 'VR_ATE', 'C_ATE')
FA.df_base_geral %<>% select(ANOMES,
VA_FTT, VA_ATE, VA_FCR, VA_FAC, VA_FMA,
# QTA_FTT, QTA_ATE, QTA_FCR, QTA_FAC, QTA_FMA,
VR_FTT, VR_ATE, VR_FCR, VR_FAC, VR_FMA,
C_FTT, C_ATE #, C_FCR, C_FAC, C_FMA
) %>%
mutate(P_FCR = VA_FCR/VA_FTT,
P_FMA = VA_FMA/VA_FTT,
DIF = VA_FTT-VA_ATE,
ANOMES = factor(ANOMES))
sf <- factor(FA.df_base$CODIGO)
FA.df_base %<>%
split(sf, drop = T) %>%
map(~cbind(., escala = scale(.$DIF, F, T))) %>%
unsplit(sf)
FA.df_base_geral %<>% cbind(.,escala_geral = scale(.$DIF, F, T))
FA.df_base %<>%  add_column(., escala_geral = FA.df_base_geral[match(.$ANOMES, FA.df_base_geral$ANOMES), 17])
##----------------------------------------------------------------------------
write.csv2(FA.df_base, 'Prestador_FT_AT_Anomes_d.csv')
##----------------------------------------------------------------------------
write.csv2(FA.df_base_geral, 'Geral_FT_AT_Anomes_d.csv')
##----------------------------------------------------------------------------
f.sum_rank <- function(df) {
res <- vector()
res[1] <- sum(df$VA_FTT, na.rm = T) + sum(df$VR_FTT, na.rm = T)
res[2] <- mad(df$escala, na.rm = T)
res[3] <- mean(abs(df$escala), na.rm = T)
names(res) <- c('VT', 'DM', 'VM')
return(res)
}
FA.lst_rank <- FA.df_base %>%
split(.$CODIGO, drop = T) %>%
map(f.sum_rank)
FA.df_rank <- tibble(prestador = character(),
nome = character(),
faturado.r = integer(),
faturado = double(),
dma.r = integer(),
dma = double(),
dma.c.r = integer(),
dma.c = double())
for (i in seq_along(FA.lst_rank)) {
FA.df_rank[i,] <- c(names(FA.lst_rank)[[i]],
'-',
0,
FA.lst_rank[[i]]['VT'],
0,
FA.lst_rank[[i]]['DM'],
0,
FA.lst_rank[[i]]['VM'])
}
FA.df_rank %<>% mutate(faturado = as.double(faturado),
dma = as.double(dma),
dma.c = as.double(dma.c),
nome = FA.df_base[match(.$prestador,FA.df_base$CODIGO), 2]) %>%
arrange(desc(faturado)) %>%
mutate(faturado.r = 1:dim(FA.df_rank)[1]) %>%
arrange(desc(dma)) %>%
mutate(dma.r = 1:dim(FA.df_rank)[1]) %>%
arrange(desc(dma.c)) %>%
mutate(dma.c.r = 1:dim(FA.df_rank)[1])
##----------------------------------------------------------------------------
write.csv2(FA.df_rank, 'Prestador_ranking.csv')
##----------------------------------------------------------------------------
##FA.df_rank
FA.lst_prestador <- FA.df_base %>%
split(.$CODIGO)
f.tb_param <- function(nm, i) {
print(FA.lst_prestador[[nm]][[1,'PRESTADOR']])
print('------------------------------------------------------------------')
print(paste0('Raking da seleção               : ',str_pad(i, width = 3, side="left",
pad = ' '), '    '))
print(paste0('Raking de faturamento           : ', str_pad(FA.df_rank[FA.df_rank$prestador == FA.lst_prestador[[nm]][[1,'CODIGO']],'faturado.r'], width = 3, side="left", pad = ' '), '    '))
print(paste0('Raking de desvio médio absoluto : ', str_pad(FA.df_rank[FA.df_rank$prestador == FA.lst_prestador[[nm]][[1,'CODIGO']],'dma.r'], width = 3, side="left", pad = ' '), '    '))
print('------------------------------------------------------------------')
tbp <- FA.lst_prestador[[nm]] %>%
mutate(VA_FTT = round(VA_FTT, 0),
VA_ATE = round(VA_ATE, 0),
P_FCR = round((P_FCR*100), 2)) %>%
select ('Ano e mês' = ANOMES,
'Valor Faturado' = VA_FTT,
'Valor Atendido' = VA_ATE,
'% F.Corrente' = P_FCR,
'Qt.Rf.Faturadas' = C_FTT) %>%
as.data.frame()
print(tbp)
}
f.gg_param <- function(nm) {
v.gt <- which(FA.lst_prestador[[nm]][,'ANOMES'] == '201705')
ggp <- ggplot(data = FA.lst_prestador[[nm]], aes(x = ANOMES, y = escala_geral)) +
geom_linerange(aes(ymax = ifelse(escala > escala_geral, escala, escala_geral),
ymin = ifelse(escala <= escala_geral, escala, escala_geral),
col = (escala_geral-escala)),
size = 1.2, alpha = 0.3) +
geom_point(aes(y = escala, col = (escala_geral-escala)),
size = 4, alpha = 1) +
geom_point(col = 'red', size = 1.7, alpha = 0.5, shape = 15) +
geom_line(aes(y = (P_FCR)+4), col = 'blue', size = 0.8, alpha = 0.4, group = 1) +
geom_hline(yintercept = 0, col = 'black', alpha = 0.4) +
geom_hline(yintercept = 5, col = 'green', alpha = 0.7) +
geom_hline(yintercept = 4.5, col = 'black', alpha = 0.7) +
geom_hline(yintercept = 4, col = 'red', alpha = 0.7) +
geom_label(aes(x = 1, y = 5.3, label = '% Faturamento Corrente'),
col = 'blue', hjust = 'left', alpha = 0.8) +
geom_vline(xintercept = v.gt, col = 'red', size = 1, alpha = 0.6) +
geom_label(aes(x = v.gt-0.2, y = 3, label = 'Gestão de teto >'),
col = 'red', hjust = 'right', alpha = 0.8) +
scale_y_continuous(breaks = seq(-7, 7, by = 0.5)) +
scale_colour_gradient2(name='Delta para\nEscala Geral',
high = 'dark green',
mid = 'light blue',
low = 'red',
midpoint = 0) +
labs(title = paste0('Proporção do Delta Faturamento x Atendimento Padronizada\n',
FA.lst_prestador[[nm]][[1,'PRESTADOR']]),
x = 'Ano e Mês',
y = 'Desvios Padrão') +
theme_bw() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
plot(ggp)
}
f.gg_fa <- function(nm) {
v.gt <- which(FA.lst_prestador[[nm]][,'ANOMES'] == '201705')
ggp <- ggplot(data = FA.lst_prestador[[nm]], aes(x = ANOMES)) +
geom_line(aes(y = (VA_FTT)/1000),
size = 0.9, col = 'dark green', alpha = 1, group = 1) +
geom_line(aes(y = (VA_ATE)/1000),
size = 0.9, col = 'blue', alpha = 1, group = 1) +
geom_vline(xintercept = v.gt, col = 'red', size = 1, alpha = 0.6) +
geom_label(aes(x = v.gt-0.2, y = 3, label = 'Gestão de teto >'),
col = 'red', hjust = 'right', alpha = 0.8) +
geom_label(aes(x = 1, y = 0, label = 'Faturado'),
col = 'dark green', hjust = 'left', alpha = 0.8) +
geom_label(aes(x = 5, y = 0, label = 'Atendido'),
col = 'blue', hjust = 'left', alpha = 0.8) +
scale_y_continuous(breaks = seq(0, 100000, by = 500)) +
labs(title = paste0('Valores de Faturamento e Atendimento\n',
FA.lst_prestador[[nm]][[1,'PRESTADOR']]),
x = 'Ano e Mês',
y = 'Valores em Milhares') +
theme_linedraw() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1))
plot(ggp)
}
FA.plot_rank <- FA.df_rank %>%
filter(faturado > v.limite_min)
v.top <- ifelse(dim(FA.plot_rank)[1] < v.top, dim(FA.plot_rank)[1], v.top)
FA.plot_rank %<>%
arrange(dma.r) %>%
select(prestador) %>%
'['(1:v.top,) %>%
'[['(1)
for (i in seq_along(FA.plot_rank)) {
f.tb_param(FA.plot_rank[i], i)
f.gg_param(FA.plot_rank[i])
f.gg_fa(FA.plot_rank[i])
}
