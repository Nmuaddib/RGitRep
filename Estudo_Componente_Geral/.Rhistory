x = 'SADT', y = 'Consulta')
#### Definição do repositório para download -----------------
## options(repos = 'http://vps.fmvz.usp.br/CRAN/')
#### Instalação do novo pacote ------------------------------
## install.packages("lmtest")
#### Ativação do pacote com o teste estatístico -------------
library("lmtest", lib.loc="~/R/win-library/3.4")
#### Testes de autocorrelação -------------------------------
dwtest(lm.cai_SCc)
bgtest(lm.cai_SCc, order = 2)
#### Ativação do pacote com transformação para Autocorrelação
library("orcutt", lib.loc="~/R/win-library/3.4")
#### Transformação dos modelo para eliminação do ruído ------
lmT.SCc <- cochrane.orcutt(lm.cai_SCc)
#### Inclusão de coluna com valores previstos ajustados -----
cai_SCc <- cai_SCc %>% add_column(predT = as.vector(fitted(lmT.SCc))) #modelr
#### Novo gráfico, com ambos modelos ------------------------
ggplot(cai_SCc, aes(y = consulta)) +
geom_point(aes(x = sadt), color = "blue", alpha = 0.5, size = 3) +
geom_line(aes(x = pred),color = "red", size = 1.2) +
geom_line(aes(x = predT), color = "green", size = 1.2) +
labs(title = 'Modelo original e transformado, procedimento Cochrane Orcutt, *em verde',
x = 'SADT', y = 'Consulta')
summary.orcutt(lmT.SCc)
#### Valores previstos --------------------------------------
fit_r <- fitted(lmT.SCc)
#### Gráfico padrão (1) Linearidade -------------------------
plot(fit_r, resid(lmT.SCc),
ylab = "Resíduos/Erros",
xlab = "Valores Previstos",
main = "Linearidade e Variância")
#### Linha de referência ------------------------------------
smt = smooth.spline(fit_r, resid(lmT.SCc), spar=1)
abline(h = 0, lty = 2)
lines(smt, col='red', lwd=1)
#### Resíduos padronizados ----------------------------------
std_r <- resid(lmT.SCc)/sd(resid(lmT.SCc))
# ou std_r <- scale(resid(lmT.SCc), center = FALSE, scale = TRUE)
#### Gráfico padrão (2) Normalidade -------------------------
qqnorm(std_r)
#### Linha de referência ------------------------------------
qqline(std_r, lty = 2)
#### Raiz de resíduos padronizados --------------------------
std_r <- sqrt(abs(std_r))
#### Gráfico padrão (3) Igualdade ---------------------------
plot(fit_r, std_r,
ylab = expression(sqrt("Resíduos Padrão")),
xlab = "Valores Previstos",
main = "Escala e Localização de Resíduos")
#### Linha de referência ------------------------------------
smt = smooth.spline(fit_r, std_r, spar=1)
lines(smt, col='red', lwd=1)
#### Ativação do pacote com a segunda forma de transformação
library("HoRM", lib.loc="~/R/win-library/3.4")
#### Valor de rho a partir da primeira transformação --------
lmT.SCc["rho"]
#### Regressão com o novo procedimento ----------------------
lmT_hil.SCc <- hildreth.lu(x = cai_SCc$consulta, y = cai_SCc$sadt, rho = 0.7097007)
## rho representa o ruído gerado pela autocorrelação
#### Extração de dados a partir do objeto do modelo ---------
cai_SCc_Hil <- as.tibble(lmT_hil.SCc[["model"]]) %>%
select(sadt = y, consulta = x)
#### Inclusão de valores previstos __------------------------
cai_SCc_Hil <- add_predictions(cai_SCc_Hil,lmT_hil.SCc)
#### Novo gráfico -------------------------------------------
ggplot(cai_SCc_Hil, aes(y = consulta)) +
geom_point(aes(x = sadt), color = "dark blue", alpha = 0.5, size = 3) +
geom_line(aes(x = pred),color = "orange", size = 1.2) +
labs(title = 'Dados e Modelo transformados pelo procedimento de Hildreth-Lu',
x = 'SADT Transformado', y = 'Consulta Transformada')
#### Leitura do objeto do modelo ----------------------------
f.lm_extract <- function(lmo) {
print(summary(lmo))
print(confint(lmo, level=0.99))
for (i in c(1:3,5)) {
plot(lmo, which = i)
}
return(lmo)
}
## Gráficos
## (1) (2)
## (3) (4)
par(mfrow = c(2,2), oma = c(0, 0, 1.1, 0))
invisible(f.lm_extract(lmT_hil.SCc))
#### Retornando à configurção de plotagem com Gráfico Único -
par(mfrow = c(1,1), oma = c(0, 0, 0, 0))
#### Intervalos para os valores previstos, IC 95% -----------
as.tibble(predict.lm(lmT_hil.SCc, level=0.95, interval = 'confidence'))
#### Preparação/Gráfico de intervalos do modelo original ----
#rm(SCc.CI)
SCc.CI <- as.tibble(predict.lm(lm.cai_SCc, level=0.95, interval = 'confidence')) %>%
add_column(., rn = as.numeric(row.names(.)))
cai_SCc <- add_column(cai_SCc, rn = as.numeric(row.names(SCc.CI)))
#### Intervalos pelo pacote plotrix -------------------------
plotCI(SCc.CI$fit[1:6], ui = SCc.CI$upr[1:6], li = SCc.CI$lwr[1:6], ylab = NULL, xlab = NULL)
#### Intervalos com apresentação melhorada pelo GGplot2 -----
ggplot(SCc.CI[25:65,], aes(x = rn, y = fit, col = fit)) +
geom_point(size = 2) +
geom_errorbar(aes(ymax = upr, ymin = lwr)) +
geom_line(color = "light blue", size = 0.4, alpha = 0.5) +
geom_point(data = cai_SCc[25:65,], aes(y = sadt),col = "red" , size = 1.5) +
theme_dark() +
scale_colour_gradient2(name="Variação em\ntorno da média",
low = "white",
mid = "orange",
midpoint = 591713,
high = "white") +
labs(title = 'Amostra de assertividade nas previsões',
x = 'Observações', y = 'Valor Previsto')
#### Teste de distribuição T para média de SADT, IC 95% -----
t.test(cai_SCc$sadt, conf.level = 0.95)
#### Teste de distribuição T para média do modelo, IC 95% ---
t.test(fitted(lmT.SCc), conf.level = 0.95) #IC para modelo
#### Intervalo para coeficientes do modelo original, IC 95% -
confint(lm.cai_SCc, level=0.95)
#### Gráfico padrão de SADT e valores previstos  ------------
par(mfrow = c(1,2), oma = c(0, 0, 1.1, 0))
plot(cai_SCc$sadt, col = 'blue')
plot(fitted(lmT.SCc), col = 'green')
#### Histograma padrão para SADT e modelo  ------------------
hist(cai_SCc$sadt, col = 'light blue')
hist(fitted(lmT.SCc), col = 'light green')
par(mfrow = c(1,1), oma = c(0, 0, 0, 0))
#### Histograma para SADT e modelo pelo GGPlot2 -------------
ggplot(cai_SCc,aes(sadt)) +
stat_bin(aes(y =..density..,
fill = ..count..),
col = "black",
binwidth = 35000,
alpha = 0.8) +
geom_density(fill = "red",
color = "orange",
alpha = 0.11) +
scale_x_continuous(breaks = seq(200000, 800000, by = 100000)) +
scale_y_continuous(labels = NULL) +
labs(title = 'Histograma de SADT', x = 'SADT', y = 'Contagem') +
scale_fill_distiller(name = 'Observações',
palette = 'YlGnBu',
direction = 1)
ggplot(cai_SCc,aes(predT)) +
stat_bin(aes(y =..density..,
fill = ..count..),
col = "black",
binwidth = 35000,
alpha = 0.8) +
geom_density(fill = "red",
color = "blue",
alpha = 0.11) +
scale_x_continuous(breaks = seq(200000, 800000, by = 100000)) +
scale_y_continuous(labels = NULL) +
labs(title = 'Histograma de SADT Previsto pelo modelo', x = 'SADT Previsto', y = 'Contagem') +
scale_fill_distiller(name = 'Observações',
palette = 'YlGn',
direction = 1)
#### Gráfico de Controle Estatístico de Processo ------------
qcc.cai_SCc <- qcc(cai_SCc$sadt, type = 'xbar.one', newdata = fitted(lmT.SCc));qcc.cai_SCc
#### Histograma e densidade com alvos para capacidade -------
process.capability (qcc.cai_SCc, spec.limits=c(400000,700000))
#### Importação de dados e inclusão de coluna ---------------
rec_des <- read_excel('Gráfico e Previsão 2017 2.xlsx') %>%
add_column(Diff = .$Despesa - .$Receita) %>%
as.tibble()
#### Gráfico base -------------------------------------------
GGrec_des <- ggplot(data = rec_des, aes(x = Ano)) + # Dados básicos e eixos comuns
# Barras de despesa
geom_col(aes(y = Despesa/1000000, fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
# Efeito gradiente para qualquer preenchimento usado na estética do gráfico
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2011 - 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
# Controle da quebra da escala no eixo X
scale_x_continuous(breaks = seq(2011, 2017, by = 1)) +
# Tema geral da área do gráfico
theme_light() +
# Mudança de orientação do texto da legenda do eixo x
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
# Textos de eixos e Título
labs(title = 'Média Mensal de Despesa X Receita', x = 'Anos', y = 'Despesa/Receita');GGrec_des
#### Gráfico com adição de camada com coluna de receita -----
GGrec_des +
# Controle da quebra da escala no eixo y
scale_y_continuous(breaks = seq(50, 180, by = 10)) +
# Barras de receita
geom_bar(aes(y = Receita/1000000),
width = 0.5, alpha=0.3,
fill = "blue",
stat = "sum",
size = 1)
#### Gráfico com adição de camada com área de receita -------
GGrec_des +
# Área de receita
geom_area(aes(y = Receita/1000000),
col = "blue",
size = 0.2,
alpha = 0.3) +
# Pontos para marcação da receita sobre a área
geom_point(aes(y = Receita/1000000, col = Diff/1000000),
size=3.8, shape=21, fill="white") +
# Texto com valores
geom_text(aes(y = (Despesa/1000000) + 13,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 4) +
# Efeito gradiente para qualquer cor usada na estética do gráfico
scale_colour_gradient(name="Valor do Delta\nem Mil, 2011 - 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
# Controle da quebra da escala no eixo y
scale_y_continuous(breaks = seq(50, 180, by = 10)) +
# Zoom no eixo y
coord_cartesian(ylim=c(45,150))
rec_des <- read_excel('Previsão_2017.xlsx') %>%
add_column(Diff = .$Despesa - .$Receita) %>%
mutate(Mês = factor(.$Mês, levels = .$Mês))
library("stringr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("readr", lib.loc="~/R/win-library/3.4")
library("tibble", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("reshape2", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("modelr", lib.loc="~/R/win-library/3.4")
library("purrr", lib.loc="~/R/win-library/3.4")
library("forcats", lib.loc="~/R/win-library/3.4")
library("plotrix", lib.loc="~/R/win-library/3.4")
library("qcc", lib.loc="~/R/win-library/3.4")
as.tibble()
GGrec_des <- ggplot(data = rec_des, aes(x = Mês)) + # Dados básicos e eixos comuns
geom_col(aes(y = (Despesa/1000000), fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
geom_bar(aes(y = (Receita/1000000)),
width = 0.4,
alpha=0.3,
fill = "blue",
stat = "sum",
size = 2) +
geom_text(aes(y = (Receita/1000000) + 14,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 5) +
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
scale_colour_gradient(name="Valor do Delta\nem Mil, 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
coord_cartesian(ylim=c(95,150)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
scale_y_continuous(breaks = seq(90, 180, by = 10)) +
labs(title = 'Despesa X Receita 2017', y = 'Despesa/Receita')
library("stringr", lib.loc="~/R/win-library/3.4")
library("dplyr", lib.loc="~/R/win-library/3.4")
library("ggplot2", lib.loc="~/R/win-library/3.4")
library("readr", lib.loc="~/R/win-library/3.4")
library("tibble", lib.loc="~/R/win-library/3.4")
library("tidyr", lib.loc="~/R/win-library/3.4")
library("reshape2", lib.loc="~/R/win-library/3.4")
library("magrittr", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("modelr", lib.loc="~/R/win-library/3.4")
library("purrr", lib.loc="~/R/win-library/3.4")
library("forcats", lib.loc="~/R/win-library/3.4")
library("plotrix", lib.loc="~/R/win-library/3.4")
library("qcc", lib.loc="~/R/win-library/3.4")
rec_des <- read_excel('Previsão_2017.xlsx') %>%
add_column(Diff = .$Despesa - .$Receita) %>%
mutate(Mês = factor(.$Mês, levels = .$Mês))
GGrec_des <- ggplot(data = rec_des, aes(x = Mês)) + # Dados básicos e eixos comuns
geom_col(aes(y = (Despesa/1000000), fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
geom_bar(aes(y = (Receita/1000000)),
width = 0.4,
alpha=0.3,
fill = "blue",
stat = "sum",
size = 2) +
geom_text(aes(y = (Receita/1000000) + 14,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 5) +
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
scale_colour_gradient(name="Valor do Delta\nem Mil, 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
coord_cartesian(ylim=c(95,150)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
scale_y_continuous(breaks = seq(90, 180, by = 10)) +
labs(title = 'Despesa X Receita 2017', y = 'Despesa/Receita')
GGrec_des
View(rec_des)
as.tibble()[1:12]
as.tibble()[[1:12]]
rec_des <- rec_des[1:12]
rec_des
as.tibble()
GGrec_des <- ggplot(data = rec_des, aes(x = Mês)) + # Dados básicos e eixos comuns
geom_col(aes(y = (Despesa/1000000), fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
geom_bar(aes(y = (Receita/1000000)),
width = 0.4,
alpha=0.3,
fill = "blue",
stat = "sum",
size = 2) +
geom_text(aes(y = (Receita/1000000) + 14,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 5) +
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
scale_colour_gradient(name="Valor do Delta\nem Mil, 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
coord_cartesian(ylim=c(95,150)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
scale_y_continuous(breaks = seq(90, 180, by = 10)) +
labs(title = 'Despesa X Receita 2017', y = 'Despesa/Receita')
GGrec_des
View(rec_des)
rm(rec_des)
as.tibble()
GGrec_des <- ggplot(data = rec_des, aes(x = Mês)) + # Dados básicos e eixos comuns
geom_col(aes(y = (Despesa/1000000), fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
geom_bar(aes(y = (Receita/1000000)),
width = 0.4,
alpha=0.3,
fill = "blue",
stat = "sum",
size = 2) +
geom_text(aes(y = (Receita/1000000) + 14,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 5) +
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
scale_colour_gradient(name="Valor do Delta\nem Mil, 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
coord_cartesian(ylim=c(95,150)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
scale_y_continuous(breaks = seq(90, 180, by = 10)) +
labs(title = 'Despesa X Receita 2017', y = 'Despesa/Receita')
GGrec_des
rm(rec_des)
rec_des <- read_excel('Previsão_2017.xlsx') %>%
add_column(Diff = .$Despesa - .$Receita) %>%
mutate(Mês = factor(.$Mês, levels = .$Mês))
View(rec_des)
as.tibble()
GGrec_des <- ggplot(data = rec_des, aes(x = Mês)) + # Dados básicos e eixos comuns
geom_col(aes(y = (Despesa/1000000), fill = Diff/1000000),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
geom_bar(aes(y = (Receita/1000000)),
width = 0.4,
alpha=0.3,
fill = "blue",
stat = "sum",
size = 2) +
geom_text(aes(y = (Receita/1000000) + 14,
label = format((Diff/1000000), digits = 2),
col = Diff/1000000),
size = 5) +
scale_fill_gradient(name="Delta entre Despesa\ne Receita em Mil, 2017",
low = "green",
high = "red",
space = "Lab",
guide = "colourbar") +
scale_colour_gradient(name="Valor do Delta\nem Mil, 2017",
low = "blue",
high = "orange",
space = "Lab",
guide = "colourbar") +
coord_cartesian(ylim=c(95,150)) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
scale_y_continuous(breaks = seq(90, 180, by = 10)) +
labs(title = 'Despesa X Receita 2017', y = 'Despesa/Receita')
GGrec_des
GGrec_des
library("stringr", lib.loc="~/R/win-library/3.4")
library("tidyverse", lib.loc="~/R/win-library/3.4")
library("reshape2", lib.loc="~/R/win-library/3.4")
library("readxl", lib.loc="~/R/win-library/3.4")
library("modelr", lib.loc="~/R/win-library/3.4")
+(2,1)
'+'(2,1)
library("ggplot2" )
source('C:/Users/Lorena/Documents/RGitRep/Estudo_Componente_Geral/Analise_Componente_Qt_v2.R', echo=TRUE)
###---------------------------------------------------------
library("reshape2" )
??setNames()
## Opções iniciais de configuração do ambiente
# ------------------------------------------------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
# ------------------------------------------------------------------------------------------
library("stringr")
library("dplyr")
library("ggplot2")
library("readr")
library("tibble")
library("tidyr")
library("magrittr")
library("readxl")
library("purrr")
library("DBI")
#library("ROracle")
# ------------------------------------------------------------------------------------------
for (i in seq_along(mn_c.ano)) vv_ano_c[i, 1:14] <- c(str_sub(names(mn_c.ano[i]), 1, 4),
str_sub(names(mn_c.ano[i]), 6),
mn_c.ano[[i]][4:15])
??setNames
## Importação, para processamento offline
# ------------------------------------------------------------------------------------------
x_vv_main <- read_excel('VV_extract_sqlbi_internação.xlsx')
x_vv_main_c <- read_excel('VV_extract_sqlbi_AMB_ESP.xlsx')
x_vv_main_c <- read_excel('VV_extract_sqlbi_AMB_ESP.xlsx')
x_vv_main %<>%
mutate(ANOMES = factor(.$ANOMES), ANO = factor(.$ANO)) %>%
as_tibble()
x_vv_main_c %<>%
mutate(CLASSE = factor(paste0(.$ANO,'-', .$CLASSE)),
ANOMES = factor(.$ANOMES),
ANO = factor(.$ANO)) %>%
as_tibble()
mn.ano <- x_vv_main %>%
split(.$ANO) %>%
map(map_dbl, mean)
mn_c.ano <- x_vv_main_c %>%
'['(c(2, 1, 3:15)) %>%
split(.$CLASSE) %>%
map(map_dbl, mean)
vv_ano <- setNames(data.frame(matrix(ncol = 17, nrow = 0)),
names(mn.ano[[1]])[-2]) %>%
as.tibble()
View(vv_ano)
names(mn.ano[[1]])[-2]
c(1:63)
View(vv_ano)
