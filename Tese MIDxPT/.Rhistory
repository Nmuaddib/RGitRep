f.membros(paste0(v_path_i, "Membros dos projetos 2014.xlsx")),
f.membros(paste0(v_path_i, "Membros dos projetos 2015.xlsx")),
f.membros(paste0(v_path_i, "Membros dos projetos 2016.xlsx")))
write.csv2(ds_membros_13_16, paste0(v_path_inter, "ds_membros_13_16.csv"))
v_form_campos <- c("nro_id_cnpq", "seq_pessoa_fisica",
"nome_sucupira", "nome_cvlattes",
"nome_filtro_cvlattes", "sgl_instituicao",
"nme_instituicao", "cod_programa",
"nme_programa", "nme_area_avaliacao",
"seq_area_basica", "area_basica",
"grande_area_basica", "nro_nota_doutorado",
"nro_nota_mestrado", "nro_nota_mestrado_prof",
"dta_fim", "seq_tipo_categoria_vinculo",
"nivel_formacao", "ano_inicio_formacao",
"ano_fim_formacao", "formacao_concluida",
"sigla_pais_ies_formacao", "sigla_uf_ies_formacao",
"sigla_ies_formacao", "nome_ies_formacao",
"nome_curso_formacao", "cod_area_curso_formacao",
"grande_area_curso_formacao", "area_curso_formacao")
ds_frmdic <- read_excel(paste0(v_path_i, "Formação dos discentes 2013-2016 - Tese.xlsx")) %>%
mutate(nro_id_cnpq = str_pad(as.character(nro_id_cnpq),
width =  16,
side = "left",
pad = "0"),
seq_pessoa_fisica = as.character(seq_pessoa_fisica)) %>%
select(v_form_campos) %>%
mutate(doc_ou_disc = "DISCENTE")
write.csv2(ds_frmdic, paste0(v_path_inter, "ds_frmdic.csv"))
ds_frmdic_mestrado <- read_excel(paste0(v_path_i, "Dicentes mestrado tratada -tese.xlsx")) %>%
mutate(nro_id_cnpq = str_pad(as.character(nro_id_cnpq),
width =  16,
side = "left",
pad = "0"),
seq_pessoa_fisica = as.character(seq_pessoa_fisica)) %>%
select(v_form_campos) %>%
mutate(doc_ou_disc = "DISCENTE")
write.csv2(ds_frmdic_mestrado, paste0(v_path_inter, "ds_frmdic_mestrado.csv"))
ds_frmdoc <- read_excel(paste0(v_path_i, "Formação dos docentes tese.xlsx")) %>%
select(v_form_campos) %>%
mutate(doc_ou_disc = "DOCENTE")
write.csv2(ds_frmdoc, paste0(v_path_inter, "ds_frmdoc.csv"))
ds_IMI1_QPPP <- ds_frmdoc %>%
group_by(cod_programa, nome_filtro_cvlattes) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QPPP = n())
write.csv2(ds_IMI1_QPPP, paste0(v_path_inter, "ds_IMI1_QPPP.csv"))
ds_IMI1_QFDPD <- ds_frmdoc %>%
filter(nivel_formacao == "Doutorado") %>%
group_by(cod_programa, nome_curso_formacao) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QFDPD = n())
write.csv2(ds_IMI1_QFDPD, paste0(v_path_inter, "ds_IMI1_QFDPD.csv"))
ds_IMI1_QFDPM <- ds_frmdoc %>%
filter(nivel_formacao == "Mestrado") %>%
group_by(cod_programa, nome_curso_formacao) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QFDPM = n())
write.csv2(ds_IMI1_QFDPM, paste0(v_path_inter, "ds_IMI1_QFDPM.csv"))
ds_IMI1_QFDPG <- ds_frmdoc %>%
filter(nivel_formacao == "Graduação") %>%
group_by(cod_programa, nome_curso_formacao) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QFDPG = n())
write.csv2(ds_IMI1_QFDPG, paste0(v_path_inter, "ds_IMI1_QFDPG.csv"))
ds_IMI1_FCDo <- merge(ds_IMI1_QFDPD, ds_IMI1_QFDPM, by = "cod_programa", all.x = T) %>%
merge(., ds_IMI1_QFDPG, by = "cod_programa", all.x = T) %>%
merge(., ds_IMI1_QPPP, by = "cod_programa", all.x = T) %>%
mutate(DFDDo = QFDPD/QPPP,
DFDM = QFDPM/QPPP,
DFDG = QFDPG/QPPP) %>% ## Fórmulas dos indicadores
mutate(DFDDo = ifelse(DFDDo <= 1, DFDDo, 1),
DFDM = ifelse(DFDM <= 1, DFDM, 1),
DFDG = ifelse(DFDG <= 1, DFDG, 1)) %>% ## Limpeza de ocorrências acima de 1.0
mutate(FCDo = (DFDDo + DFDM + DFDG)/3) %>% ## Fórmula do constructo
merge(ds_prg, ., by.x = "CD_PROGRAMA_IES", by.y = "cod_programa", all.y = T) ## Categorias
write.csv2(ds_IMI1_FCDo, paste0(v_path_o, "FCDo.csv"))
kable(ds_IMI1_FCDo[1:12, c(1,8:15)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_frmdic_ttl <- rbind(ds_frmdic, ds_frmdic_mestrado) %>%
filter(nivel_formacao == "Graduação") %>%
group_by(cod_programa,
nome_filtro_cvlattes,
doc_ou_disc,
nome_curso_formacao) %>%
summarise(QT = n()) ## Junção de formações de discentes e filtro de graduação
write.csv2(ds_frmdic_ttl, paste0(v_path_inter, "ds_frmdic_ttl.csv"))
ds_IMI2_QDP <- ds_frmdic_ttl %>%
group_by(cod_programa, nome_filtro_cvlattes) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QDP = n())
write.csv2(ds_IMI2_QDP, paste0(v_path_inter, "ds_IMI2_QDP.csv"))
ds_IMI2_QFGDi <- ds_frmdic_ttl %>%
group_by(cod_programa, nome_curso_formacao) %>%
summarise(QT = n()) %>%
group_by(cod_programa) %>%
summarise(QFGDi = n())
write.csv2(ds_IMI2_QFGDi, paste0(v_path_inter, "ds_IMI2_QFGDi.csv"))
ds_IMI2_FCDi <- merge(ds_IMI2_QFGDi, ds_IMI2_QDP, by = "cod_programa", all.x = T) %>%
mutate(DFGDi = QFGDi/QDP) %>% ## Fórmula do indicador
mutate(DFGDi = ifelse(DFGDi <= 1, DFGDi, 1)) %>% ## Limpeza de ocorrências acima de 1.0
mutate(FCDi = DFGDi) %>%  ## Fórmula do constructo
merge(ds_prg, ., by.x = "CD_PROGRAMA_IES", by.y = "cod_programa", all.y = T) ## Categorias
write.csv2(ds_IMI2_FCDi, paste0(v_path_o, "FCDi.csv"))
kable(ds_IMI2_FCDi[1:12, c(1,8:11)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_fin <-  rbind(read_excel(paste0(v_path_i, "Financiadores de proejtos 2013.xlsx")),
read_excel(paste0(v_path_i, "Financiadores de projetos 2014.xlsx")),
read_excel(paste0(v_path_i, "Financiadores de projetos 2015.xlsx")),
read_excel(paste0(v_path_i, "Financiadores de proejtos 2016.xlsx"))) ## Carga de Instituições
ds_IMI3_QIP <- ds_fin %>%
group_by(CD_PROGRAMA_IES, NM_FINANCIADOR) %>%
summarise(QT = n()) %>%
group_by(CD_PROGRAMA_IES) %>%
summarise(QIP = n())
write.csv2(ds_IMI3_QIP, paste0(v_path_inter, "ds_IMI3_QIP.csv"))
ds_IMI3_QPP <- ds_fin %>%
group_by(CD_PROGRAMA_IES, ID_PROJETO) %>%
summarise(QT = n()) %>%
group_by(CD_PROGRAMA_IES) %>%
summarise(QPP = n())
write.csv2(ds_IMI3_QPP, paste0(v_path_inter, "ds_IMI3_QPP.csv"))
ds_formacao_grd <- rbind(ds_frmdic, ds_frmdoc, ds_frmdic_mestrado) %>%
filter(nivel_formacao == "Graduação") %>%
group_by(cod_programa,
nome_filtro_cvlattes,
doc_ou_disc,
nome_curso_formacao) %>%
summarise(QT = n()) ## Junção de formações de todos os membros e filtro de graduação
write.csv2(ds_formacao_grd, paste0(v_path_inter, "ds_formacao_grd.csv"))
ds_MbrPrj_grd <- merge(ds_membros_13_16, ds_formacao_grd,
by.x = c("CD_PROGRAMA_IES", "NM_MEMBRO_PROJETO", "DS_TIPO_MEMBRO"),
by.y = c("cod_programa", "nome_filtro_cvlattes", "doc_ou_disc")) #@ Junção de
## membros e formações
write.csv2(ds_MbrPrj_grd, paste0(v_path_inter, "ds_MbrPrj_grd.csv"))
ds_IMI3_DFPP <- ds_MbrPrj_grd %>%
group_by(CD_PROGRAMA_IES, ID_PROJETO, nome_curso_formacao) %>%
summarise(QT = n()) %>%
group_by(CD_PROGRAMA_IES, ID_PROJETO) %>%
summarise(DFPP = n())
write.csv2(ds_IMI3_DFPP, paste0(v_path_inter, "ds_IMI3_DFPP.csv"))
ds_IMI3_QMP <- ds_MbrPrj_grd %>%
group_by(CD_PROGRAMA_IES, ID_PROJETO, NM_MEMBRO_PROJETO) %>%
summarise(QT = n()) %>%
group_by(CD_PROGRAMA_IES, ID_PROJETO) %>%
summarise(QMP = n())
write.csv2(ds_IMI3_QMP, paste0(v_path_inter, "ds_IMI3_QMP.csv"))
#### Geração de arquivo de colaboração no nível de projetos para conferência de dados -----------
ds_DFCP <- merge(ds_IMI3_DFPP, ds_IMI3_QMP , by = c("CD_PROGRAMA_IES", "ID_PROJETO")) %>%
mutate(DFCP = DFPP/QMP) %>%
mutate(DFCP = ifelse(DFCP <= 1, DFCP, 1))
write.csv2(ds_DFCP, paste0(v_path_o, "DFCP.csv"))
#### --------------------------------------------------------------------------------------------
kable(ds_DFCP[1:12, ]) ## Amostra do arquivo gerado acima
ds_IMI3_DFCP <- merge(ds_IMI3_DFPP, ds_IMI3_QMP, by = c("CD_PROGRAMA_IES", "ID_PROJETO")) %>%
mutate(DFCP = DFPP/QMP) %>% ## Fórmula do indicador
mutate(DFCP = ifelse(DFCP <= 1, DFCP, 1)) %>% ## Limpeza de ocorrências acima de 1.0
group_by(CD_PROGRAMA_IES) %>%
summarise(DFPP = mean(DFPP),
QMP = mean(QMP),
DFCP = mean(DFCP)) ## Consolidação de variáveis e indicador
write.csv2(ds_IMI3_DFCP, paste0(v_path_inter, "ds_IMI3_DFCP.csv"))
ds_IMI3_CC <- merge(ds_IMI3_QIP, ds_IMI3_QPP, by = "CD_PROGRAMA_IES", all.x = T) %>%
merge(., ds_IMI3_DFCP, by = "CD_PROGRAMA_IES", all.x = T) %>% ## Junção com indicador de
## diversidade de formações
## de colaboradores
mutate(DIPP = QIP/QPP) %>% ## Fórmula do indicador
mutate(DIPP = ifelse(DIPP <= 1, DIPP, 1)) %>% ## Limpeza de ocorrências acima de 1.0
mutate(CC = (DFCP + DIPP)/2) ## Fórmula do constructo
ds_IMI3_CC <-  ds_IMI3_CC[,c(1:3, 7, 4:6, 8)] ## Reordenação de campos
ds_IMI3_CC %<>% merge(ds_prg, ., by = "CD_PROGRAMA_IES", all.y = T) ## Categorias
write.csv2(ds_IMI3_CC, paste0(v_path_o, "CC.csv"))
kable(ds_IMI3_CC[1:12, c(1,8:14)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_aratdo <- read_excel(paste0(v_path_i, 'Areas_de_atuacao_docentes_25_06_2019.xlsx'))
ds_IMI4_QCDI <- ds_aratdo %>%
mutate(espec_doc = paste0(grande_area, nome_area, sub_area, especialidade)) %>%
group_by(cod_programa, nome_filtro_cvlattes, espec_doc) %>%
summarise(QT = n()) %>%
group_by(cod_programa, nome_filtro_cvlattes) %>%
summarise(QCDI = n())
write.csv2(ds_IMI4_QCDI, paste0(v_path_inter, "ds_IMI4_QCDI.csv"))
ds_IMI4_QGAD <- ds_aratdo %>%
group_by(cod_programa, nome_filtro_cvlattes, grande_area) %>%
summarise(QT = n()) %>%
group_by(cod_programa, nome_filtro_cvlattes) %>%
summarise(QGAD = n())
write.csv2(ds_IMI4_QGAD, paste0(v_path_inter, "ds_IMI4_QGAD.csv"))
ds_IMI4_QACD <- ds_aratdo %>%
group_by(cod_programa, nome_filtro_cvlattes, nome_area) %>%
summarise(QT = n()) %>%
group_by(cod_programa, nome_filtro_cvlattes) %>%
summarise(QACD = n())
write.csv2(ds_IMI4_QACD, paste0(v_path_inter, "ds_IMI4_QACD.csv"))
ds_IMI4_CP <- merge(ds_IMI4_QGAD, ds_IMI4_QACD, by = c("cod_programa","nome_filtro_cvlattes"), all.x = T) %>%
merge(., ds_IMI4_QCDI, by = c("cod_programa","nome_filtro_cvlattes"), all.x = T) %>%
mutate(DGAC = QGAD/QCDI,
DAC = QACD/QCDI) %>% ## Fórmulas dos indicadores
mutate(DGAC = ifelse(DGAC <= 1, DGAC, 1),
DAC = ifelse(DAC <= 1, DAC, 1)) %>% ## Limpeza de ocorrências acima de 1.0
mutate(CP = (DGAC + DAC)/2) ## Fórmula do constructo
write.csv2(ds_IMI4_CP, paste0(v_path_o, "CP_docente.csv"))
kable(ds_IMI4_CP[1:12, ]) ## Amostra do arquivo gerado acima
ds_IMI4_CP_pgr <- ds_IMI4_CP %>%
group_by(cod_programa) %>%
summarise(CP = mean(CP)) %>% ## Consolidação por programa
merge(ds_prg, ., by.x = "CD_PROGRAMA_IES", by.y = "cod_programa", all.y = T) ## Categorias
write.csv2(ds_IMI4_CP_pgr, paste0(v_path_o, "CP_programa.csv"))
kable(ds_IMI4_CP_pgr[1:12, c(1,8)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_IMI <- merge(ds_IMI1_FCDo[,c("CD_PROGRAMA_IES", "FCDo")],
ds_IMI2_FCDi[,c("CD_PROGRAMA_IES", "FCDi" )],
by = "CD_PROGRAMA_IES", all = T) %>%
merge(., ds_IMI3_CC[,c("CD_PROGRAMA_IES","CC")],
by = "CD_PROGRAMA_IES", all = T) %>%
merge(., ds_IMI4_CP_pgr[,c("CD_PROGRAMA_IES","CP")],
by = "CD_PROGRAMA_IES", all = T)
ds_IMI <- ds_IMI[complete.cases(ds_IMI),] ## Casos completos
ds_IMI %<>% mutate(IMI = (FCDo + FCDi + CC + CP)/4) %>%
merge(ds_prg, ., by = "CD_PROGRAMA_IES", all.y = T) ## Categorias
write.csv2(ds_IMI, paste0(v_path_o, "IMI.csv"))
kable(ds_IMI[1:12, c(1,8:12)]) ## Amostra do arquivo gerado acima, sem as categorias
#### Carga de Aplicativos, patentes e PRodutos a partir de planilhas ----------------------------
ds_PT_appprg <- read_excel(paste0(v_path_i, "Aplicativos_tese.xlsx"))
ds_PT_patprg <- read_excel(paste0(v_path_i, "Patentes com Programas.xlsx"))
ds_PT_prdprg <- read_excel(paste0(v_path_i, "Produtos_tese.xlsx"))
#### --------------------------------------------------------------------------------------------
ds_PT_patprg <- ds_PT_patprg[complete.cases(ds_PT_patprg[,"NM_PRODUCAO"]),] ## Filtro de produção valida
ds_IPT1_SPPP<- ds_PT_patprg %>%
group_by(CD_PROGRAMA_IES) %>%
summarise(SPPP = n())
write.csv2(ds_IPT1_SPPP, paste0(v_path_inter, "ds_IPT1_SPPP.csv"))
#### --------------------------------------------------------------------------------------------
ds_PT_prdprg <- ds_PT_prdprg[complete.cases(ds_PT_prdprg[,"DSFINALIDADE_TRATADA"]),] ## Filtro de produção valida
ds_IPT2_SPPPr <- ds_PT_prdprg %>%
group_by(CD_PROGRAMA_IES) %>%
summarise(SPPPr = n())
write.csv2(ds_IPT2_SPPPr, paste0(v_path_inter, "ds_IPT2_SPPPr.csv"))
#### --------------------------------------------------------------------------------------------
ds_PT_appprg <- ds_PT_appprg[complete.cases(ds_PT_appprg[,"DS_FINALIDADE"]),] ## Filtro de produção valida
ds_IPT3_SAPP <- ds_PT_appprg %>%
group_by(CD_PROGRAMA_IES) %>%
summarise(SAPP = n())
write.csv2(ds_IPT3_SAPP, paste0(v_path_inter, "ds_IPT3_SAPP.csv"))
#### --------------------------------------------------------------------------------------------
ds_IPT <- merge(ds_IMI1_QPPP, ds_IPT1_SPPP, by.x = "cod_programa", by.y = "CD_PROGRAMA_IES", all.x = T) %>%
select(CD_PROGRAMA_IES = cod_programa, QPPP, SPPP) %>%
merge(., ds_IPT2_SPPPr, by = "CD_PROGRAMA_IES", all.x = T) %>%
merge(., ds_IPT3_SAPP, by = "CD_PROGRAMA_IES", all.x = T)
ds_IPT[is.na(ds_IPT)] <- 0 ### Conversão de NA para 0
ds_IPT %<>% mutate(QPPa = SPPP/QPPP,
QPPr = SPPPr/QPPP,
QPA = SAPP/QPPP) %>% ## Fórmulas dos indicadores
mutate(QPPa = ifelse(QPPa <= 1, QPPa, 1),
QPPr = ifelse(QPPr <= 1, QPPr, 1),
QPA = ifelse(QPA <= 1, QPA, 1)) %>% ## Limpeza de ocorrências acima de 1.0
mutate(IPT = (QPPa+QPPr+QPA)/3) %>% ## Fórmula do indice
merge(ds_prg, ., by = "CD_PROGRAMA_IES", all.y = T) ## Categorias
write.csv2(ds_IPT, paste0(v_path_o, "IPT.csv"))
kable(ds_IPT[1:12, c(1,8:15)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_COR <- merge(ds_IMI[,c(1,12)], ds_IPT[,c(1,15)], by = "CD_PROGRAMA_IES", all = T) ## União de indices
ds_COR <- ds_COR[complete.cases(ds_COR),] ## Filtro de casos completos
ds_COR %<>% filter(IPT > 0)%>% ## Filtro de projetos com produção tecnologica
merge(ds_prg, ., by = "CD_PROGRAMA_IES", all.y = T) ## Categorias
write.csv2(ds_COR, paste0(v_path_o, "COR.csv"))
kable(ds_COR[1:12, c(1,8:9)]) ## Amostra do arquivo gerado acima, sem as categorias
ds_COR_p <- ds_COR %>%
select(IMI, IPT) %>%
cor(., method = "pearson") ## Correlação geral
write.csv2(ds_COR_p, paste0(v_path_o, "COR_p.csv"))
as_tibble(ds_COR_p) ## Tabela de correlação Geral
##### ---------------------------------------------------------------------------------------
f.corr <- function(df, mtd = "pearson"){
df %<>% select(IMI,IPT) %>%
cor(., method = mtd)
return(df)
} ## Função para aplicação de correlação em cada sessão do split por categoria
f.print_corr <- function(df){
dfo <- tibble(cat = as.character(), cor = as.double())
for (i in seq_along(df)) {
dfo[i,] <- c(names(df[i]), df[[i]][1,2])
}
return(dfo)
} ## Função para criação de dataset com correlação por item de categoria
##### ---------------------------------------------------------------------------------------
ano_f <- factor(ds_COR$ANO_INICIO_PROGRAMA) ## Fator para split de categoria
ds_COR_ano <- ds_COR %>% select(ANO_INICIO_PROGRAMA,IMI,IPT) %>%
split(ano_f, drop = T) %>% ## Separação por ano
map(f.corr) ## Calculo de correlação para cada segmento
ds_COR_ano <- f.print_corr(ds_COR_ano)
ds_COR_ano <- ds_COR %>% group_by(ANO_INICIO_PROGRAMA) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_ano, by.x = "ANO_INICIO_PROGRAMA", by.y = "cat", all = T) %>%
mutate(ANO_INICIO_PROGRAMA = as.character(ANO_INICIO_PROGRAMA))
write.csv2(ds_COR_ano, paste0(v_path_o, "COR_ano.csv"))
kable(ds_COR_ano)
##### ---------------------------------------------------------------------------------------
conceito_f <- factor(ds_COR$CD_CONCEITO_PROGRAMA) ## Fator para split de categoria
ds_COR_conceito <- ds_COR %>% select(CD_CONCEITO_PROGRAMA,IMI,IPT) %>%
split(conceito_f, drop = T) %>% ## Separação por conceito
map(f.corr) ## Calculo de correlação para cada segmento
ds_COR_conceito <- f.print_corr(ds_COR_conceito)
ds_COR_conceito <- ds_COR %>% group_by(CD_CONCEITO_PROGRAMA) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_conceito, by.x = "CD_CONCEITO_PROGRAMA", by.y = "cat", all = T) %>%
mutate(ANO_INICIO_PROGRAMA = as.character(CD_CONCEITO_PROGRAMA))
write.csv2(ds_COR_conceito, paste0(v_path_o, "COR_conceito.csv"))
kable(ds_COR_conceito)
##### ---------------------------------------------------------------------------------------
dependencia_f <- factor(ds_COR$DS_DEPENDENCIA_ADMINISTRATIVA) ## Fator para split de categoria
ds_COR_dependencia <- ds_COR %>% select(DS_DEPENDENCIA_ADMINISTRATIVA,IMI,IPT) %>%
split(dependencia_f, drop = T) %>% ## Separação por dependencia
map(f.corr) ## Calculo de correlação para cada segmento
ds_COR_dependencia <- f.print_corr(ds_COR_dependencia)
ds_COR_dependencia <- ds_COR %>% group_by(DS_DEPENDENCIA_ADMINISTRATIVA) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_dependencia, by.x = "DS_DEPENDENCIA_ADMINISTRATIVA", by.y = "cat", all = T)
write.csv2(ds_COR_dependencia, paste0(v_path_o, "COR_dependencia.csv"))
kable(ds_COR_dependencia)
##### ---------------------------------------------------------------------------------------
area_f <- factor(ds_COR$NM_AREA_AVALIACAO) ## Fator para split de categoria
ds_COR_area <- ds_COR %>% select(NM_AREA_AVALIACAO,IMI,IPT) %>%
split(area_f, drop = T) %>% ## Separação por area
map(f.corr) ## Calculo de correlação para cada segmento
ds_siglas <- read_excel(paste0(v_path_i, "Siglas áreas de avaliação.xlsx")) %>%
select(nome = "Nome área de avaliação",
sigla = "Sigla")
ds_COR_area <- f.print_corr(ds_COR_area)
ds_COR_area <- ds_COR %>% group_by(NM_AREA_AVALIACAO) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_area, by.x = "NM_AREA_AVALIACAO", by.y = "cat", all = T) %>%
merge(., ds_siglas, by.x = "NM_AREA_AVALIACAO", by.y = "nome")
ds_COR_area <- ds_COR_area[,c(11,1:10)]
write.csv2(ds_COR_area, paste0(v_path_o, "COR_area.csv"))
kable(ds_COR_area)
##### ---------------------------------------------------------------------------------------
status_f <- factor(ds_COR$CS_STATUS_JURIDICO) ## Fator para split de categoria
ds_COR_status <- ds_COR %>% select(CS_STATUS_JURIDICO,IMI,IPT) %>%
split(status_f, drop = T) %>% ## Separação por status
map(f.corr) ## Calculo de correlação para cada segmento
ds_COR_status <- f.print_corr(ds_COR_status)
ds_COR_status <- ds_COR %>% group_by(CS_STATUS_JURIDICO) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_status, by.x = "CS_STATUS_JURIDICO", by.y = "cat", all = T)
write.csv2(ds_COR_status, paste0(v_path_o, "COR_status.csv"))
kable(ds_COR_status)
##### ---------------------------------------------------------------------------------------
modalidade_f <- factor(ds_COR$NM_MODALIDADE_PROGRAMA) ## Fator para split de categoria
ds_COR_modalidade <- ds_COR %>% select(NM_MODALIDADE_PROGRAMA,IMI,IPT) %>%
split(modalidade_f, drop = T) %>% ## Separação por modalidade
map(f.corr) ## Calculo de correlação para cada segmento
ds_COR_modalidade <- f.print_corr(ds_COR_modalidade)
ds_COR_modalidade <- ds_COR %>% group_by(NM_MODALIDADE_PROGRAMA) %>%
summarise(m_IMI = mean(IMI),                #|
m_IPT = mean(IPT),                #| Média
v_IMI = var(IMI),                 #|
v_IPT = var(IPT),                 #| Variancia
d_IMI = sd(IMI),                  #|
d_IPT = sd(IPT),                  #| Devio padrão
pc_IMI = (d_IMI/m_IMI)*100,       #|
pc_IPT = (d_IPT/m_IPT)*100) %>%   #| Percentual do desvio padrão sobre valor esperado
merge(., ds_COR_modalidade, by.x = "NM_MODALIDADE_PROGRAMA", by.y = "cat", all = T)
write.csv2(ds_COR_modalidade, paste0(v_path_o, "COR_modalidade.csv"))
kable(ds_COR_modalidade)
##### ---------------------------------------------------------------------------------------
f.mplot <- function(ds, label) {
#### Base -------------------------------------------
GGCor <- ggplot(data = ds, aes(x = ds[,1])) +
geom_col(aes(y = (as.double(cor)*100)),
width = 0.9,
alpha=0.4,
#stat = "sum",
col = "black",
size = 1) +
# scale_y_discrete(breaks = seq(1, 100, by = 10)) +
geom_hline(yintercept = 0, col = 'black', alpha = 0.9) +
geom_hline(yintercept = 30, col = 'blue', alpha = 0.9) +
geom_label(aes(x = 0.5, y = 110, label = 'Correlação média ^'),
col = 'blue', hjust = 'left', alpha = 0.8, size=1.8) +
geom_hline(yintercept = 60, col = 'green', alpha = 0.9) +
geom_label(aes(x = 0.5, y = 130, label = 'Correlação alta ^'),
col = 'green', hjust = 'left', alpha = 0.8, size=1.8) +
geom_point(aes(y = (as.double(cor)*100)),
size=1.8, shape=21, fill="black") +
geom_text(aes(y = (as.double(cor)*100) + ifelse(as.double(cor) > 0, 6, -6),
label = format(as.double(cor), digits = 4)),
size = 2) +
theme_light() +
theme(axis.text.x = element_text(angle = 45,
vjust = 1,
size = 9,
hjust = 1)) +
labs(title = 'Correlação por Categoria', x = paste0('Categoria (_', label, '_)'), y = 'Corr * 100');GGCor
}
f.mplot(ds_COR_ano, "Ano")
f.mplot(ds_COR_area, "Area")
f.mplot(ds_COR_conceito, "Conceito")
f.mplot(ds_COR_dependencia, "Dependencia")
f.mplot(ds_COR_modalidade, "Modalidade")
f.mplot(ds_COR_status, "Status")
f.histo <- function(ds){
#### Histograma por categoria pelo GGPlot2 -------------
GGHis <- ggplot(ds,aes(ds[,2])) +
stat_bin(aes(y =..density..,
fill = ..count..),
col = "black",
binwidth = 0.05,
alpha = 0.8) +
geom_density(fill = "red",
color = "orange",
alpha = 0.11) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05)) +
scale_y_continuous(labels = NULL) +
labs(title = paste0('Histograma de ', v_idx, " - ", v_categ) , x = ds[1,1], y = 'Contagem') +
scale_fill_distiller(name = 'Observações',
palette = v_pal,
direction = 1);GGHis
}
v_categ <- "Área de Avaliação"
v_idx <- "IPT"
v_pal <- 'YlGnBu'
ds_cat_P <- ds_COR %>%  select(NM_AREA_AVALIACAO, IPT) %>%
split(as.factor(.$NM_AREA_AVALIACAO)) %>%
map(f.histo);
v_idx <- "IMI"
v_pal <- 'YlGn'
ds_cat_D <- ds_COR %>%  select(NM_AREA_AVALIACAO, IMI) %>%
split(as.factor(.$NM_AREA_AVALIACAO)) %>%
map(f.histo);
for(i in seq_along(ds_cat_P)){
ds_cat_P[i];
ds_cat_D[i];
}
ds_cat_P[1]
ds_cat_P[[1]]
for(i in seq_along(ds_cat_P)){
ds_cat_P[[i]];
ds_cat_D[[i]];
}
seq_along(ds_cat_P)
for(i in seq_along(ds_cat_P)){
ds_cat_P[[i]];
ds_cat_D[[i]];
}
View(ds_cat_D)
ds_cat_P[[5]]
for(i in seq_along(ds_cat_P)){
print(ds_cat_P[[i]])
print(ds_cat_D[[i]])
}
f.histo <- function(ds){
#### Histograma por categoria pelo GGPlot2 -------------
GGHis <- ggplot(ds,aes(ds[,2])) +
stat_bin(aes(y =..density..,
fill = ..count..),
col = "black",
binwidth = 0.05,
alpha = 0.8) +
geom_density(fill = "red",
color = "orange",
alpha = 0.11) +
scale_x_continuous(breaks = seq(0, 1, by = 0.05)) +
scale_y_continuous(labels = NULL) +
labs(title = paste0('Histograma de ', v_idx, " - ", v_categ, " - ", ds[1,1]) , x = ds[1,1], y = 'Contagem') +
scale_fill_distiller(name = 'Observações',
palette = v_pal,
direction = 1);GGHis
}
for(i in seq_along(ds_cat_P)){
ds_cat_P[[i]]
ds_cat_D[[i]]
}
ls(ds_COR)
View(ds_IMI1_FCDo)
View(ds_IMI2_FCDi)
View(ds_COR)
View(ds_COR)
